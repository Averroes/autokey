#summary User Contributed Scripts *Advanced*.
#labels Featured

= Introduction =

This page contains user contributed scripts to demonstrate the *advanced* capabilities of !AutoKey's scripting service.

For specific details on the custom functions available to !AutoKey scripts, see the [http://autokey.googlecode.com/svn/trunk/doc/scripting/index.html API reference].

== Table Of Content ==
<wiki:toc>

=== Choose Browser On Link Selection ===

*Discovered at*: [http://www.linuxjournal.com/content/autokey-desktop-automation-utility-linux Linux Journal]

*Author*: [http://www.linuxjournal.com/users/mike-diehl Mike Diehl]

*Description*: This Autokey script takes a highlighted url from any program and triggers a selection of browsers from which you can choose to load the page.

{{{
choices = ["konqueror", "firefox", "chrome"]
retCode, choice = dialog.list_menu(choices)
if retCode == 0:
  system.exec_command(choice + " " + clipboard.get_selection())
}}}

[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Health Potion Drinker ===

*Author*: [http://www.bowierocks.com Itscool - Al]

*Description*: I created this Autokey script to help me manage the drinking of health potions. The game lacks a mechanism to quickly imbibe a potion without some difficulty. It is far easier to hit one key that does it for you. In the case of this script, you are also taken back to safe zone if you are out of health potions. All you have to do is make sure you have pot in all of your slots. It will work even if you don’t have pot in all of the slots. For use with the flash client at [http://www.realmofthemadgod.com Realm of the Mad God].

{{{
if not store.has_key("heal"):
# set the key 'persistant variable' if we don’t have it already
store.set_value("heal",1)

pot = store.get_value("heal")
if pot > 8:
  # also send us back to the nexus
  pot = 1
  keyboard.send_key("<f5>")

#do the pot thing
output = str(pot)
keyboard.send_key(output)
#increment the pot

pot = pot + 1

store.set_value("heal",pot)
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Ask For Assistance ===

*Author*: [http://www.bowierocks.com Itscool - Al]

*Description*: I created this Autokey script to do two things. 1) Generate a randomized shout message to gain assistance and 2) drink a manna pot from one of the bottom four inventory slots. For use with the flash client at [http://www.realmofthemadgod.com Realm of the Mad God].

{{{
from random import randrange
announcement = ["OMG","","DARN","","OH BOY","","COME HERE","","TP ME","","MESHUGANA","","OY",""]
declaration = ["I could seriously use some help here","The devs must be crazy","How many minions did Oryx say he had to feed?","Dodge bullets? Sure. But this","MONSTERS"]
expletives = ["!","!!","!!!","!!!!1","!!!1!","!!1!1!"]

if not store.has_key("mana"):
    # set the key 'persistant variable' if we don't have it already
    # or if the value is greater than 8 reset it to 5
    store.set_value("mana",5)

mana = store.get_value("mana")
if mana > 8:
    mana = 5

part1 = announcement[randrange(len(announcement))]
part2 = declaration[randrange(len(declaration))]

if part1 != "":
    part1 = part1 + expletives[randrange(len(expletives))]
if part2 != "":
    part2 = part2 + expletives[randrange(len(expletives))]

output = "/yell " + part1 + " " + part2 + "\n"
keyboard.send_keys(output)

#do the mana thing
output = str(mana)
keyboard.send_key(output)
#increment the mana
mana = mana + 1
store.set_value("mana",mana)
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Ask For A Cleric ===

*Author*: [http://www.bowierocks.com Itscool - Al]

*Description*: I created this Autokey script will help you manage drinking health potions in the top four inventory slots. Additionally it'll generate a random yell asking for some type of healing support. For use with the flash client at [http://www.realmofthemadgod.com Realm of the Mad God].

{{{
from random import randrange
announcement = ["HELP","","HP","","HEAL","","MEDIC","","DR. WHO","","1-800-PRIEST",""]
declaration = ["I could use some professional help here","Anyone in the businesses of hp","Bring lots of that RED STUFF in a jar","I don't wanna die","Mommy","You can leave a msg at GHOSTBUSTERS","I'm going to meet the maker","Great, I'm another Father Dowling Mystery","Agatha Christi?! Posh","Should've listened to Momma","I don't want this chocolate","..."]
expletives = ["!","!!","!!!","!!!!1","!!!1!","!!1!1!"]

if not store.has_key("pot"):
    # set the key 'persistant variable' if we don't have it already
    # or if the value is greater than 4 reset it to 1
    store.set_value("pot",1)

pot = store.get_value("pot")
if pot > 4:
    pot = 1

part1 = announcement[randrange(len(announcement))]
part2 = declaration[randrange(len(declaration))]

if part1 != "":
    part1 = part1 + expletives[randrange(len(expletives))]

if part2 != "":
    part2 = part2 + expletives[randrange(len(expletives))]

output = "/yell " + part1 + " " + part2 + "\n"
keyboard.send_keys(output)

#do the pot thing
output = str(pot)
keyboard.send_key(output)
#increment the pot
pot = pot + 1
store.set_value("pot",pot)
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Gnome Screenshot ===

*Author*: [http://groups.google.com/groups/profile?enc_user=gy_J_BYAAABLTVwIPyUi9oJFSRwGwC70o4cocwWvDVg2RHsu8f1bCg Dave]

*Description*: The Autokey script created here will allow you to quickly screenshot your desktop while moving your mouse off to the right. Dave had originally submitted it to the group forums there and at least 4 of us helped him to modify it and make it faster.

{{{
#
# replace ~/Downloads with the location of where you told gnome-screenshot to save the pic
#
system.exec_command("bash -c 'rm ~/Downloads/today.png'",False)
system.exec_command("gnome-screenshot -w", False)
window.wait_for_exist("Save Screenshot", timeOut=5)
system.exec_command("xte 'mousemove 725 399'", False)
window.activate("Save Screenshot", switchDesktop=False)
keyboard.send_keys("today")
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Switch Or Start Firefox ===

*Author*: Jack

*Description*: this script switches to the Firefox window. if Firefox is not already running, the script starts it. i use similar scripts for the applications i use most.

{{{
#
#start firefox or switch to firefox
import subprocess
command = 'wmctrl -l'
output = system.exec_command(command, getOutput=True)

if 'Firefox' in output:
    window.activate(‘Firefox’,switchDesktop=True)

else:
    subprocess.Popen(["/usr/bin/firefox"])
#
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== RSS Zoomer ===

*Author*: Jack

*Description*: several actions to go on the same key… i have this on this script sends `'^+'` when in Firefox or Chromium to do a zoom in. when i'm reading RSS feeds in Akregator, it sends `'='` to move to the next unread item.

{{{
#

winTitle = window.get_active_title()

if 'Mozilla Firefox' in winTitle:
    output = "+"
    keyboard.send_keys(output)

elif 'Chromium' in winTitle:
    output = "+"
    keyboard.send_keys(output)

elif 'Akregator' in winTitle:
    output = "="
    keyboard.send_keys(output)

else:
    output = ""
    keyboard.send_keys(output)

#
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Move Active Window ===

*Author*: Jack

*Description*: here are 4 tiny scripts to move the active window left, right, up, down. fwiw i have them on Super+AppropriateArrow.

{{{
#——————————————–#
# move active window left
thisWin = window.get_active_title()
windetails = window.get_active_geometry() # returns tuple of: x, y, width, height
newX = windetails[0] - 40
window.resize_move(thisWin, xOrigin=newX, yOrigin=-1, width=-1, height=-1, matchClass=False)
#——————————————–#

#——————————————–#
# move active window right
thisWin = window.get_active_title()
windetails = window.get_active_geometry() # returns tuple of: x, y, width, height
newX = windetails[0] + 40
window.resize_move(thisWin, xOrigin=newX, yOrigin=-1, width=-1, height=-1, matchClass=False)
#——————————————–#

#——————————————–#
# move active window up
thisWin = window.get_active_title()
windetails = window.get_active_geometry() # returns tuple of: x, y, width, height
newY=windetails[1] - 80 # must bigger than approx 40, otherwise window moves down!
window.resize_move(thisWin, xOrigin=-1, yOrigin=newY, width=-1, height=-1, matchClass=False)
#——————————————–#
 

#——————————————–#
# move active window down
thisWin = window.get_active_title()
windetails = window.get_active_geometry() # returns tuple of: x, y, width, height
oldY = windetails[1]
newY=windetails[1] + 20
window.resize_move(thisWin, xOrigin=-1, yOrigin=newY, width=-1, height=-1, matchClass=False)
#——————————————–#
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]

=== Offline Print Queue ===

*Author*: [http://groups.google.com/groups/profile?enc_user=wEhtURIAAAD4aTgqVkoh5XFntZCWEVBLD1eZzMt9YX5JjiuRxhHx-A Joe]

*Description*: Changes `<ctrl>+p` for Mozilla applications to print to a file in a special offline print queue using incremented file names, intended for use with duplexpr.

{{{
# print2file 
import time 
import os 
## Copyleft 2012/01/31 - JPmicrosystems GPL 
## Change <ctrl>+p for Firefox and Thunderbird 
## to print to file in a special print queue using 
## numbered file names, 01, 02, … so the print jobs stay in order 
## Intended for use with duplexpr 
## http://sourceforge.net/projects/duplexpr/ 
## User must manually create print queue folder (~/pq) 
## Hotkey <ctrl>+p 
## Window Filter .*Mozilla.* 
## Changes <ctrl>+p to 
## Print to file and looks at the print queue (~/pq) 
## Finds the last print file number and increments it by one 
## Doesn’t send final <Enter> so additional options like Print Selection 
## can be set by the user 
##Fails if Loading file to print takes longer than the second delay 
## Open the File menu 
## (can’t use <ctrl>+p because that’s the hotkey) 
keyboard.send_keys("<alt>+f") 
time.sleep(1.0) 
## Select Print 
keyboard.send_keys("p") 
time.sleep(2.0) 
## tab to the printer selection list, then to the top of the list 
## which is the Print to File selection 
keyboard.send_keys("<tab><home>") 
time.sleep(2.0) 
## tab to the file name field and enter the print queue directory path 
keyboard.send_keys("<tab>pq/") 
## Set path to print queue 
path = os.getenv("HOME") + '/pq' 
## Get all the files in the print queue in a list 
dirList=os.listdir(path) 
## And sort it in reverse order 
## So the largest numbered file is first 
dirList.sort(reverse=True) 
## If there aren't any files then 
## Set last file to 0 
## else, set it to the last file 
if len(dirList) == 0: 
   output = '0' 
else: 
   output = dirList[0] 
## Increment the file number 
output = str(int(output) + 1) 
## If it's less than 2 characters long, 
## Left pad it with a zero 
## To maintain the sorting order 
if len(output) < 2: 
   output = '0' + output 
## complete the file name field in the print dialog 
## But don't send an enter so the user can select 
## options before printing 
keyboard.send_keys(output)
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]
=== Key Wrapper ===

*Author*: [http://groups.google.com/groups/profile?enc_user=x6tfARIAAAAifj82FffFIj7Xx_wp_F3B8rhlH0Pnl47z4AZhN98BFg tpower21]

*Description*: Wrap selected text with one or two keys/sets of keys, or 
output them if nothing's selected, and keep your current clipboard. 
Can call it using engine.run_script(description) then bind 
whatever's calling it to something i.e. for round brackets: 

*binder script*:
{{{
wrap = "<shift>+9" 
wrap_close = "<shift>+0" 
engine.run_script("wrap_selection")
}}}

*script*: wrap_selection
{{{
# wrap_selection 
# get keys 
try: 
    wrap 
except NameError: 
    dialog.info_dialog("Need at least one key to wrap selection with.") 
try: 
    wrap_close 
except NameError: 
    wrap_close = wrap 
# below needed to get working in some apps, otherwise 
# clipboard.get_selection() quicker/better 
# get clipboard/selection 
try: 
    clip_board = clipboard.get_clipboard() 
except: 
    clip_board = "" 
keyboard.send_keys("<ctrl>+x") 
time.sleep(0.01) 
try: 
    selection = clipboard.get_clipboard() 
except: 
    selection = "" 
# clipboard won't update if selection empty 
if clip_board == selection: 
    selection = "" # problem if clipboard and selection are the same 
# and not empty, but not the end of the world 
# wrap and clean up 
keyboard.send_keys(wrap+selection+wrap_close+"<left>") 
clipboard.fill_clipboard(clip_board) 
del clip_board, selection, wrap, wrap_close 
}}}
[http://code.google.com/p/autokey/wiki/ContributedScripts Table Of Content]